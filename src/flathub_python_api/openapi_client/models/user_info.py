# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_info import AuthInfo
from openapi_client.models.auths import Auths
from openapi_client.models.permission import Permission
from typing import Optional, Set
from typing_extensions import Self

class UserInfo(BaseModel):
    """
    UserInfo
    """ # noqa: E501
    displayname: Optional[StrictStr] = None
    dev_flatpaks: Optional[List[StrictStr]] = None
    permissions: Optional[List[Permission]] = None
    owned_flatpaks: Optional[List[StrictStr]] = None
    invited_flatpaks: Optional[List[StrictStr]] = None
    invite_code: StrictStr
    accepted_publisher_agreement_at: Optional[datetime]
    default_account: AuthInfo
    auths: Auths
    __properties: ClassVar[List[str]] = ["displayname", "dev_flatpaks", "permissions", "owned_flatpaks", "invited_flatpaks", "invite_code", "accepted_publisher_agreement_at", "default_account", "auths"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_account
        if self.default_account:
            _dict['default_account'] = self.default_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auths
        if self.auths:
            _dict['auths'] = self.auths.to_dict()
        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if accepted_publisher_agreement_at (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_publisher_agreement_at is None and "accepted_publisher_agreement_at" in self.model_fields_set:
            _dict['accepted_publisher_agreement_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayname": obj.get("displayname"),
            "dev_flatpaks": obj.get("dev_flatpaks"),
            "permissions": obj.get("permissions"),
            "owned_flatpaks": obj.get("owned_flatpaks"),
            "invited_flatpaks": obj.get("invited_flatpaks"),
            "invite_code": obj.get("invite_code"),
            "accepted_publisher_agreement_at": obj.get("accepted_publisher_agreement_at"),
            "default_account": AuthInfo.from_dict(obj["default_account"]) if obj.get("default_account") is not None else None,
            "auths": Auths.from_dict(obj["auths"]) if obj.get("auths") is not None else None
        })
        return _obj


