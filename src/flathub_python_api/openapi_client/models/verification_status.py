# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.login_provider import LoginProvider
from openapi_client.models.verification_method import VerificationMethod
from typing import Optional, Set
from typing_extensions import Self

class VerificationStatus(BaseModel):
    """
    VerificationStatus
    """ # noqa: E501
    verified: StrictBool
    timestamp: Optional[StrictStr] = None
    method: Optional[VerificationMethod] = None
    website: Optional[StrictStr] = None
    login_provider: Optional[LoginProvider] = None
    login_name: Optional[StrictStr] = None
    login_is_organization: Optional[StrictBool] = None
    detail: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["verified", "timestamp", "method", "website", "login_provider", "login_name", "login_is_organization", "detail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerificationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if method (nullable) is None
        # and model_fields_set contains the field
        if self.method is None and "method" in self.model_fields_set:
            _dict['method'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if login_provider (nullable) is None
        # and model_fields_set contains the field
        if self.login_provider is None and "login_provider" in self.model_fields_set:
            _dict['login_provider'] = None

        # set to None if login_name (nullable) is None
        # and model_fields_set contains the field
        if self.login_name is None and "login_name" in self.model_fields_set:
            _dict['login_name'] = None

        # set to None if login_is_organization (nullable) is None
        # and model_fields_set contains the field
        if self.login_is_organization is None and "login_is_organization" in self.model_fields_set:
            _dict['login_is_organization'] = None

        # set to None if detail (nullable) is None
        # and model_fields_set contains the field
        if self.detail is None and "detail" in self.model_fields_set:
            _dict['detail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerificationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "verified": obj.get("verified"),
            "timestamp": obj.get("timestamp"),
            "method": obj.get("method"),
            "website": obj.get("website"),
            "login_provider": obj.get("login_provider"),
            "login_name": obj.get("login_name"),
            "login_is_organization": obj.get("login_is_organization"),
            "detail": obj.get("detail")
        })
        return _obj


