# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.default_account import DefaultAccount
from openapi_client.models.github_repository_result import GithubRepositoryResult
from openapi_client.models.user_owned_app_result import UserOwnedAppResult
from openapi_client.models.user_result_connected_accounts_inner import UserResultConnectedAccountsInner
from openapi_client.models.user_role_result import UserRoleResult
from typing import Optional, Set
from typing_extensions import Self

class UserResult(BaseModel):
    """
    UserResult
    """ # noqa: E501
    id: StrictInt
    display_name: Optional[StrictStr]
    default_account: Optional[DefaultAccount]
    connected_accounts: List[UserResultConnectedAccountsInner]
    accepted_publisher_agreement_at: Optional[datetime]
    roles: List[UserRoleResult]
    github_repos: Optional[List[GithubRepositoryResult]]
    owned_apps: Optional[List[UserOwnedAppResult]]
    __properties: ClassVar[List[str]] = ["id", "display_name", "default_account", "connected_accounts", "accepted_publisher_agreement_at", "roles", "github_repos", "owned_apps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_account
        if self.default_account:
            _dict['default_account'] = self.default_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in connected_accounts (list)
        _items = []
        if self.connected_accounts:
            for _item_connected_accounts in self.connected_accounts:
                if _item_connected_accounts:
                    _items.append(_item_connected_accounts.to_dict())
            _dict['connected_accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in github_repos (list)
        _items = []
        if self.github_repos:
            for _item_github_repos in self.github_repos:
                if _item_github_repos:
                    _items.append(_item_github_repos.to_dict())
            _dict['github_repos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owned_apps (list)
        _items = []
        if self.owned_apps:
            for _item_owned_apps in self.owned_apps:
                if _item_owned_apps:
                    _items.append(_item_owned_apps.to_dict())
            _dict['owned_apps'] = _items
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if default_account (nullable) is None
        # and model_fields_set contains the field
        if self.default_account is None and "default_account" in self.model_fields_set:
            _dict['default_account'] = None

        # set to None if accepted_publisher_agreement_at (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_publisher_agreement_at is None and "accepted_publisher_agreement_at" in self.model_fields_set:
            _dict['accepted_publisher_agreement_at'] = None

        # set to None if github_repos (nullable) is None
        # and model_fields_set contains the field
        if self.github_repos is None and "github_repos" in self.model_fields_set:
            _dict['github_repos'] = None

        # set to None if owned_apps (nullable) is None
        # and model_fields_set contains the field
        if self.owned_apps is None and "owned_apps" in self.model_fields_set:
            _dict['owned_apps'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "display_name": obj.get("display_name"),
            "default_account": DefaultAccount.from_dict(obj["default_account"]) if obj.get("default_account") is not None else None,
            "connected_accounts": [UserResultConnectedAccountsInner.from_dict(_item) for _item in obj["connected_accounts"]] if obj.get("connected_accounts") is not None else None,
            "accepted_publisher_agreement_at": obj.get("accepted_publisher_agreement_at"),
            "roles": [UserRoleResult.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "github_repos": [GithubRepositoryResult.from_dict(_item) for _item in obj["github_repos"]] if obj.get("github_repos") is not None else None,
            "owned_apps": [UserOwnedAppResult.from_dict(_item) for _item in obj["owned_apps"]] if obj.get("owned_apps") is not None else None
        })
        return _obj


