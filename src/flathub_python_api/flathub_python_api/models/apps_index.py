# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flathub_python_api.models.main_categories import MainCategories
from flathub_python_api.models.verification_method import VerificationMethod
from typing import Optional, Set
from typing_extensions import Self

class AppsIndex(BaseModel):
    """
    AppsIndex
    """ # noqa: E501
    name: StrictStr
    keywords: Optional[List[StrictStr]]
    summary: StrictStr
    description: StrictStr
    id: StrictStr
    type: StrictStr
    translations: Optional[Dict[str, Dict[str, StrictStr]]] = None
    project_license: StrictStr
    is_free_license: StrictBool
    app_id: StrictStr
    icon: Optional[StrictStr]
    main_categories: MainCategories
    sub_categories: Optional[List[StrictStr]] = None
    developer_name: Optional[StrictStr]
    verification_verified: StrictBool
    verification_method: VerificationMethod
    verification_login_name: Optional[StrictStr]
    verification_login_provider: Optional[StrictStr]
    verification_login_is_organization: Optional[StrictStr]
    verification_website: Optional[StrictStr]
    verification_timestamp: Optional[StrictStr]
    runtime: Optional[StrictStr]
    updated_at: StrictInt
    arches: Optional[List[StrictStr]]
    added_at: StrictInt
    trending: Optional[Union[StrictFloat, StrictInt]] = None
    installs_last_month: Optional[StrictInt] = None
    is_mobile_friendly: StrictBool = Field(alias="isMobileFriendly")
    __properties: ClassVar[List[str]] = ["name", "keywords", "summary", "description", "id", "type", "translations", "project_license", "is_free_license", "app_id", "icon", "main_categories", "sub_categories", "developer_name", "verification_verified", "verification_method", "verification_login_name", "verification_login_provider", "verification_login_is_organization", "verification_website", "verification_timestamp", "runtime", "updated_at", "arches", "added_at", "trending", "installs_last_month", "isMobileFriendly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppsIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_categories
        if self.main_categories:
            _dict['main_categories'] = self.main_categories.to_dict()
        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['keywords'] = None

        # set to None if translations (nullable) is None
        # and model_fields_set contains the field
        if self.translations is None and "translations" in self.model_fields_set:
            _dict['translations'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if sub_categories (nullable) is None
        # and model_fields_set contains the field
        if self.sub_categories is None and "sub_categories" in self.model_fields_set:
            _dict['sub_categories'] = None

        # set to None if developer_name (nullable) is None
        # and model_fields_set contains the field
        if self.developer_name is None and "developer_name" in self.model_fields_set:
            _dict['developer_name'] = None

        # set to None if verification_login_name (nullable) is None
        # and model_fields_set contains the field
        if self.verification_login_name is None and "verification_login_name" in self.model_fields_set:
            _dict['verification_login_name'] = None

        # set to None if verification_login_provider (nullable) is None
        # and model_fields_set contains the field
        if self.verification_login_provider is None and "verification_login_provider" in self.model_fields_set:
            _dict['verification_login_provider'] = None

        # set to None if verification_login_is_organization (nullable) is None
        # and model_fields_set contains the field
        if self.verification_login_is_organization is None and "verification_login_is_organization" in self.model_fields_set:
            _dict['verification_login_is_organization'] = None

        # set to None if verification_website (nullable) is None
        # and model_fields_set contains the field
        if self.verification_website is None and "verification_website" in self.model_fields_set:
            _dict['verification_website'] = None

        # set to None if verification_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.verification_timestamp is None and "verification_timestamp" in self.model_fields_set:
            _dict['verification_timestamp'] = None

        # set to None if runtime (nullable) is None
        # and model_fields_set contains the field
        if self.runtime is None and "runtime" in self.model_fields_set:
            _dict['runtime'] = None

        # set to None if arches (nullable) is None
        # and model_fields_set contains the field
        if self.arches is None and "arches" in self.model_fields_set:
            _dict['arches'] = None

        # set to None if trending (nullable) is None
        # and model_fields_set contains the field
        if self.trending is None and "trending" in self.model_fields_set:
            _dict['trending'] = None

        # set to None if installs_last_month (nullable) is None
        # and model_fields_set contains the field
        if self.installs_last_month is None and "installs_last_month" in self.model_fields_set:
            _dict['installs_last_month'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppsIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "keywords": obj.get("keywords"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "type": obj.get("type"),
            "translations": obj.get("translations"),
            "project_license": obj.get("project_license"),
            "is_free_license": obj.get("is_free_license"),
            "app_id": obj.get("app_id"),
            "icon": obj.get("icon"),
            "main_categories": MainCategories.from_dict(obj["main_categories"]) if obj.get("main_categories") is not None else None,
            "sub_categories": obj.get("sub_categories"),
            "developer_name": obj.get("developer_name"),
            "verification_verified": obj.get("verification_verified"),
            "verification_method": obj.get("verification_method"),
            "verification_login_name": obj.get("verification_login_name"),
            "verification_login_provider": obj.get("verification_login_provider"),
            "verification_login_is_organization": obj.get("verification_login_is_organization"),
            "verification_website": obj.get("verification_website"),
            "verification_timestamp": obj.get("verification_timestamp"),
            "runtime": obj.get("runtime"),
            "updated_at": obj.get("updated_at"),
            "arches": obj.get("arches"),
            "added_at": obj.get("added_at"),
            "trending": obj.get("trending"),
            "installs_last_month": obj.get("installs_last_month"),
            "isMobileFriendly": obj.get("isMobileFriendly")
        })
        return _obj


