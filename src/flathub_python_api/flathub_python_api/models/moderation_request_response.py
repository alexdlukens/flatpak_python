# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flathub_python_api.models.moderation_request_type import ModerationRequestType
from flathub_python_api.models.request_data import RequestData
from typing import Optional, Set
from typing_extensions import Self

class ModerationRequestResponse(BaseModel):
    """
    ModerationRequestResponse
    """ # noqa: E501
    id: StrictInt
    app_id: StrictStr
    created_at: datetime
    build_id: StrictInt
    job_id: StrictInt
    is_outdated: StrictBool
    request_type: ModerationRequestType
    request_data: Optional[RequestData] = None
    is_new_submission: StrictBool
    handled_by: Optional[StrictStr] = None
    handled_at: Optional[datetime] = None
    is_approved: Optional[StrictBool] = None
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "app_id", "created_at", "build_id", "job_id", "is_outdated", "request_type", "request_data", "is_new_submission", "handled_by", "handled_at", "is_approved", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModerationRequestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_data
        if self.request_data:
            _dict['request_data'] = self.request_data.to_dict()
        # set to None if request_data (nullable) is None
        # and model_fields_set contains the field
        if self.request_data is None and "request_data" in self.model_fields_set:
            _dict['request_data'] = None

        # set to None if handled_by (nullable) is None
        # and model_fields_set contains the field
        if self.handled_by is None and "handled_by" in self.model_fields_set:
            _dict['handled_by'] = None

        # set to None if handled_at (nullable) is None
        # and model_fields_set contains the field
        if self.handled_at is None and "handled_at" in self.model_fields_set:
            _dict['handled_at'] = None

        # set to None if is_approved (nullable) is None
        # and model_fields_set contains the field
        if self.is_approved is None and "is_approved" in self.model_fields_set:
            _dict['is_approved'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModerationRequestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "app_id": obj.get("app_id"),
            "created_at": obj.get("created_at"),
            "build_id": obj.get("build_id"),
            "job_id": obj.get("job_id"),
            "is_outdated": obj.get("is_outdated"),
            "request_type": obj.get("request_type"),
            "request_data": RequestData.from_dict(obj["request_data"]) if obj.get("request_data") is not None else None,
            "is_new_submission": obj.get("is_new_submission"),
            "handled_by": obj.get("handled_by"),
            "handled_at": obj.get("handled_at"),
            "is_approved": obj.get("is_approved"),
            "comment": obj.get("comment")
        })
        return _obj


