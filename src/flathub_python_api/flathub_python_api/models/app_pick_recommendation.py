# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppPickRecommendation(BaseModel):
    """
    AppPickRecommendation
    """ # noqa: E501
    app_id: StrictStr
    number_of_times_app_of_the_week: StrictInt = Field(alias="numberOfTimesAppOfTheWeek")
    last_time_app_of_the_week: Optional[date] = Field(alias="lastTimeAppOfTheWeek")
    number_of_times_app_of_the_day: StrictInt = Field(alias="numberOfTimesAppOfTheDay")
    last_time_app_of_the_day: Optional[date] = Field(alias="lastTimeAppOfTheDay")
    __properties: ClassVar[List[str]] = ["app_id", "numberOfTimesAppOfTheWeek", "lastTimeAppOfTheWeek", "numberOfTimesAppOfTheDay", "lastTimeAppOfTheDay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppPickRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_time_app_of_the_week (nullable) is None
        # and model_fields_set contains the field
        if self.last_time_app_of_the_week is None and "last_time_app_of_the_week" in self.model_fields_set:
            _dict['lastTimeAppOfTheWeek'] = None

        # set to None if last_time_app_of_the_day (nullable) is None
        # and model_fields_set contains the field
        if self.last_time_app_of_the_day is None and "last_time_app_of_the_day" in self.model_fields_set:
            _dict['lastTimeAppOfTheDay'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppPickRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_id": obj.get("app_id"),
            "numberOfTimesAppOfTheWeek": obj.get("numberOfTimesAppOfTheWeek"),
            "lastTimeAppOfTheWeek": obj.get("lastTimeAppOfTheWeek"),
            "numberOfTimesAppOfTheDay": obj.get("numberOfTimesAppOfTheDay"),
            "lastTimeAppOfTheDay": obj.get("lastTimeAppOfTheDay")
        })
        return _obj


