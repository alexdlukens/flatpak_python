# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flathub_python_api.models.apps_index import AppsIndex
from typing import Optional, Set
from typing_extensions import Self

class MeilisearchResponseLimitedAppsIndex(BaseModel):
    """
    MeilisearchResponseLimitedAppsIndex
    """ # noqa: E501
    hits: List[AppsIndex]
    query: StrictStr
    processing_time_ms: StrictInt = Field(alias="processingTimeMs")
    limit: StrictInt
    offset: StrictInt
    estimated_total_hits: StrictInt = Field(alias="estimatedTotalHits")
    facet_distribution: Optional[Dict[str, Dict[str, StrictInt]]] = Field(default=None, alias="facetDistribution")
    facet_stats: Optional[Dict[str, Dict[str, StrictInt]]] = Field(default=None, alias="facetStats")
    __properties: ClassVar[List[str]] = ["hits", "query", "processingTimeMs", "limit", "offset", "estimatedTotalHits", "facetDistribution", "facetStats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeilisearchResponseLimitedAppsIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hits (list)
        _items = []
        if self.hits:
            for _item_hits in self.hits:
                if _item_hits:
                    _items.append(_item_hits.to_dict())
            _dict['hits'] = _items
        # set to None if facet_distribution (nullable) is None
        # and model_fields_set contains the field
        if self.facet_distribution is None and "facet_distribution" in self.model_fields_set:
            _dict['facetDistribution'] = None

        # set to None if facet_stats (nullable) is None
        # and model_fields_set contains the field
        if self.facet_stats is None and "facet_stats" in self.model_fields_set:
            _dict['facetStats'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeilisearchResponseLimitedAppsIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hits": [AppsIndex.from_dict(_item) for _item in obj["hits"]] if obj.get("hits") is not None else None,
            "query": obj.get("query"),
            "processingTimeMs": obj.get("processingTimeMs"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "estimatedTotalHits": obj.get("estimatedTotalHits"),
            "facetDistribution": obj.get("facetDistribution"),
            "facetStats": obj.get("facetStats")
        })
        return _obj


