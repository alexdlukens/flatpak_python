# coding: utf-8

"""
    Flathub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from flathub_python_api.models.platform import Platform
from typing import Optional, Set
from typing_extensions import Self

class VendingConfig(BaseModel):
    """
    Global vending environment configuration values
    """ # noqa: E501
    status: StrictStr
    platforms: Dict[str, Platform]
    fee_fixed_cost: StrictInt
    fee_cost_percent: StrictInt
    fee_prefer_percent: StrictInt
    __properties: ClassVar[List[str]] = ["status", "platforms", "fee_fixed_cost", "fee_cost_percent", "fee_prefer_percent"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ok']):
            raise ValueError("must be one of enum values ('ok')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VendingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in platforms (dict)
        _field_dict = {}
        if self.platforms:
            for _key_platforms in self.platforms:
                if self.platforms[_key_platforms]:
                    _field_dict[_key_platforms] = self.platforms[_key_platforms].to_dict()
            _dict['platforms'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VendingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "platforms": dict(
                (_k, Platform.from_dict(_v))
                for _k, _v in obj["platforms"].items()
            )
            if obj.get("platforms") is not None
            else None,
            "fee_fixed_cost": obj.get("fee_fixed_cost"),
            "fee_cost_percent": obj.get("fee_cost_percent"),
            "fee_prefer_percent": obj.get("fee_prefer_percent")
        })
        return _obj


